// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Appostolic.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250911171158_s1_09_agent_runtime_tables_apply")]
    partial class s1_09_agent_runtime_tables_apply
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("app")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Appostolic.Api.Domain.Agents.Agent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<int>("MaxSteps")
                        .HasColumnType("integer")
                        .HasColumnName("max_steps");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("model");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.Property<string>("SystemPrompt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("system_prompt");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision")
                        .HasColumnName("temperature");

                    b.Property<string[]>("ToolAllowlist")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("tool_allowlist");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("agents", "app", t =>
                        {
                            t.HasCheckConstraint("ck_agents_max_steps_range", "max_steps BETWEEN 1 AND 50");

                            t.HasCheckConstraint("ck_agents_temperature_range", "temperature >= 0 AND temperature <= 2");
                        });
                });

            modelBuilder.Entity("Appostolic.Api.Domain.Agents.AgentTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AgentId")
                        .HasColumnType("uuid")
                        .HasColumnName("agent_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text")
                        .HasColumnName("error_message");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finished_at");

                    b.Property<string>("InputJson")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("input_json");

                    b.Property<string>("ResultJson")
                        .HasColumnType("text")
                        .HasColumnName("result_json");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("AgentId", "CreatedAt")
                        .IsDescending(false, true)
                        .HasDatabaseName("ix_agent_tasks_agent_created");

                    b.HasIndex("Status", "CreatedAt")
                        .IsDescending(false, true)
                        .HasDatabaseName("ix_agent_tasks_status_created");

                    b.ToTable("agent_tasks", "app");
                });

            modelBuilder.Entity("Appostolic.Api.Domain.Agents.AgentTrace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CompletionTokens")
                        .HasColumnType("integer")
                        .HasColumnName("completion_tokens");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<int>("DurationMs")
                        .HasColumnType("integer")
                        .HasColumnName("duration_ms");

                    b.Property<string>("InputJson")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("input_json");

                    b.Property<int>("Kind")
                        .HasColumnType("integer")
                        .HasColumnName("kind");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.Property<string>("OutputJson")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("output_json");

                    b.Property<int>("PromptTokens")
                        .HasColumnType("integer")
                        .HasColumnName("prompt_tokens");

                    b.Property<int>("StepNumber")
                        .HasColumnType("integer")
                        .HasColumnName("step_number");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid")
                        .HasColumnName("task_id");

                    b.HasKey("Id");

                    b.HasIndex("TaskId", "StepNumber")
                        .IsUnique();

                    b.ToTable("agent_traces", "app", t =>
                        {
                            t.HasCheckConstraint("ck_agent_traces_duration_ms", "duration_ms >= 0");

                            t.HasCheckConstraint("ck_agent_traces_step_number", "step_number >= 1");
                        });
                });

            modelBuilder.Entity("Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Audience")
                        .HasColumnType("integer")
                        .HasColumnName("audience");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Status");

                    b.ToTable("lessons", "app");
                });

            modelBuilder.Entity("Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "UserId")
                        .IsUnique();

                    b.ToTable("memberships", "app");
                });

            modelBuilder.Entity("Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("tenants", "app");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users", "app");
                });
#pragma warning restore 612, 618
        }
    }
}
