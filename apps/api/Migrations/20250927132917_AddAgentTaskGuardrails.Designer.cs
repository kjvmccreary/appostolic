// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Appostolic.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250927132917_AddAgentTaskGuardrails")]
    partial class AddAgentTaskGuardrails
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("app")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "citext");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Appostolic.Api.Domain.Agents.Agent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_enabled");

                    b.Property<int>("MaxSteps")
                        .HasColumnType("integer")
                        .HasColumnName("max_steps");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("model");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.Property<string>("SystemPrompt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("system_prompt");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision")
                        .HasColumnName("temperature");

                    b.Property<string[]>("ToolAllowlist")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("tool_allowlist");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("agents", "app", t =>
                        {
                            t.HasCheckConstraint("ck_agents_max_steps_range", "max_steps BETWEEN 1 AND 50");

                            t.HasCheckConstraint("ck_agents_temperature_range", "temperature >= 0 AND temperature <= 2");
                        });
                });

            modelBuilder.Entity("Appostolic.Api.Domain.Agents.AgentTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AgentId")
                        .HasColumnType("uuid")
                        .HasColumnName("agent_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text")
                        .HasColumnName("error_message");

                    b.Property<decimal?>("EstimatedCostUsd")
                        .HasColumnType("numeric(12,4)")
                        .HasColumnName("estimated_cost_usd");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finished_at");

                    b.Property<string>("GuardrailDecision")
                        .HasColumnType("text")
                        .HasColumnName("guardrail_decision");

                    b.Property<string>("GuardrailMetadataJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("guardrail_metadata_json");

                    b.Property<string>("InputJson")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("input_json");

                    b.Property<string>("RequestTenant")
                        .HasColumnType("varchar(64)")
                        .HasColumnName("request_tenant");

                    b.Property<string>("RequestUser")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("request_user");

                    b.Property<string>("ResultJson")
                        .HasColumnType("text")
                        .HasColumnName("result_json");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int>("TotalCompletionTokens")
                        .HasColumnType("integer")
                        .HasColumnName("total_completion_tokens");

                    b.Property<int>("TotalPromptTokens")
                        .HasColumnType("integer")
                        .HasColumnName("total_prompt_tokens");

                    b.HasKey("Id");

                    b.HasIndex("AgentId", "CreatedAt")
                        .IsDescending(false, true)
                        .HasDatabaseName("ix_agent_tasks_agent_created");

                    b.HasIndex("RequestTenant", "CreatedAt")
                        .IsDescending(false, true)
                        .HasDatabaseName("ix_agent_tasks_tenant_created");

                    b.HasIndex("Status", "CreatedAt")
                        .IsDescending(false, true)
                        .HasDatabaseName("ix_agent_tasks_status_created");

                    b.ToTable("agent_tasks", "app");
                });

            modelBuilder.Entity("Appostolic.Api.Domain.Agents.AgentTrace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CompletionTokens")
                        .HasColumnType("integer")
                        .HasColumnName("completion_tokens");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<int>("DurationMs")
                        .HasColumnType("integer")
                        .HasColumnName("duration_ms");

                    b.Property<string>("InputJson")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("input_json");

                    b.Property<int>("Kind")
                        .HasColumnType("integer")
                        .HasColumnName("kind");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.Property<string>("OutputJson")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("output_json");

                    b.Property<int>("PromptTokens")
                        .HasColumnType("integer")
                        .HasColumnName("prompt_tokens");

                    b.Property<int>("StepNumber")
                        .HasColumnType("integer")
                        .HasColumnName("step_number");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid")
                        .HasColumnName("task_id");

                    b.HasKey("Id");

                    b.HasIndex("TaskId", "StepNumber")
                        .IsUnique();

                    b.ToTable("agent_traces", "app", t =>
                        {
                            t.HasCheckConstraint("ck_agent_traces_duration_ms", "duration_ms >= 0");

                            t.HasCheckConstraint("ck_agent_traces_step_number", "step_number >= 1");
                        });
                });

            modelBuilder.Entity("Appostolic.Api.Domain.Guardrails.GuardrailDenominationPolicy", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<JsonDocument>("Definition")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("definition");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_guardrail_denomination_policies_name");

                    b.ToTable("guardrail_denomination_policies", "app");
                });

            modelBuilder.Entity("Appostolic.Api.Domain.Guardrails.GuardrailSystemPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<JsonDocument>("Definition")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("definition");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("slug");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("ux_guardrail_system_policies_slug");

                    b.ToTable("guardrail_system_policies", "app");
                });

            modelBuilder.Entity("Appostolic.Api.Domain.Guardrails.GuardrailTenantPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_user_id");

                    b.Property<JsonDocument>("Definition")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("definition");

                    b.Property<string>("DerivedFromPresetId")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("derived_from_preset_id");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("policy_key");

                    b.Property<int>("Layer")
                        .HasColumnType("integer")
                        .HasColumnName("layer");

                    b.Property<JsonDocument>("Metadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_at");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by_user_id");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Key")
                        .IsUnique()
                        .HasDatabaseName("ux_guardrail_tenant_policies_active_key")
                        .HasFilter("is_active = true");

                    b.HasIndex("TenantId", "Layer")
                        .HasDatabaseName("ix_guardrail_tenant_policies_layer");

                    b.ToTable("guardrail_tenant_policies", "app");
                });

            modelBuilder.Entity("Appostolic.Api.Domain.Guardrails.GuardrailUserPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<DateTime?>("LastAppliedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_applied_at");

                    b.Property<JsonDocument>("Preferences")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("preferences");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("ux_guardrail_user_preferences_tenant_user");

                    b.ToTable("guardrail_user_preferences", "app");
                });

            modelBuilder.Entity("Appostolic.Api.Domain.Notifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<short>("AttemptCount")
                        .HasColumnType("smallint")
                        .HasColumnName("attempt_count");

                    b.Property<string>("BodyHtml")
                        .HasColumnType("text")
                        .HasColumnName("body_html");

                    b.Property<string>("BodyText")
                        .HasColumnType("text")
                        .HasColumnName("body_text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("DataJson")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("data_json");

                    b.Property<string>("DedupeKey")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("dedupe_key");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("kind");

                    b.Property<string>("LastError")
                        .HasColumnType("text")
                        .HasColumnName("last_error");

                    b.Property<DateTimeOffset?>("LastResendAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_resend_at");

                    b.Property<DateTimeOffset?>("NextAttemptAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("next_attempt_at");

                    b.Property<int>("ResendCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("resend_count");

                    b.Property<Guid?>("ResendOfNotificationId")
                        .HasColumnType("uuid")
                        .HasColumnName("resend_of_notification_id");

                    b.Property<string>("ResendReason")
                        .HasColumnType("text")
                        .HasColumnName("resend_reason");

                    b.Property<DateTimeOffset?>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTimeOffset?>("ThrottleUntil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("throttle_until");

                    b.Property<string>("ToEmail")
                        .IsRequired()
                        .HasColumnType("citext")
                        .HasColumnName("to_email");

                    b.Property<string>("ToName")
                        .HasColumnType("text")
                        .HasColumnName("to_name");

                    b.Property<string>("TokenHash")
                        .HasColumnType("varchar(128)")
                        .HasColumnName("token_hash");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .IsDescending()
                        .HasDatabaseName("ix_notifications_created_desc");

                    b.HasIndex("DedupeKey")
                        .IsUnique()
                        .HasDatabaseName("ux_notifications_dedupe_key_active")
                        .HasFilter("dedupe_key IS NOT NULL AND status IN ('Queued','Sending')");

                    b.HasIndex("ResendOfNotificationId")
                        .HasDatabaseName("ix_notifications_resend_of");

                    b.HasIndex("Status", "NextAttemptAt")
                        .HasDatabaseName("ix_notifications_status_next_attempt");

                    b.HasIndex("TenantId", "CreatedAt")
                        .IsDescending(false, true)
                        .HasDatabaseName("ix_notifications_tenant_created");

                    b.HasIndex("ToEmail", "Kind", "CreatedAt")
                        .IsDescending(false, false, true)
                        .HasDatabaseName("ix_notifications_to_kind_created");

                    b.ToTable("notifications", "app");
                });

            modelBuilder.Entity("Appostolic.Api.Domain.Notifications.NotificationDedupe", b =>
                {
                    b.Property<string>("DedupeKey")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("dedupe_key");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.HasKey("DedupeKey");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("ix_notification_dedupes_expires");

                    b.ToTable("notification_dedupes", "app");
                });

            modelBuilder.Entity("Appostolic.Api.Infrastructure.Auth.Jwt.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("DeviceName")
                        .HasColumnType("varchar(120)")
                        .HasColumnName("device_name");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("Fingerprint")
                        .HasColumnType("varchar(128)")
                        .HasColumnName("fingerprint");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_used_at");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<DateTime?>("OriginalCreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("original_created_at");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("purpose");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked_at");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token_hash");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TokenHash")
                        .IsUnique()
                        .HasDatabaseName("ux_refresh_tokens_token_hash");

                    b.HasIndex("UserId", "CreatedAt")
                        .HasDatabaseName("ix_refresh_tokens_user_created");

                    b.ToTable("refresh_tokens", "app");
                });

            modelBuilder.Entity("Audit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("ChangedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("changed_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("ChangedByEmail")
                        .HasColumnType("text")
                        .HasColumnName("changed_by_email");

                    b.Property<Guid?>("ChangedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("changed_by_user_id");

                    b.Property<int>("NewRoles")
                        .HasColumnType("integer")
                        .HasColumnName("new_roles");

                    b.Property<int>("OldRoles")
                        .HasColumnType("integer")
                        .HasColumnName("old_roles");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "ChangedAt")
                        .HasDatabaseName("ix_audits_tenant_changed");

                    b.ToTable("audits", "app");
                });

            modelBuilder.Entity("Invitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("accepted_at");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<Guid?>("InvitedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("invited_by_user_id");

                    b.Property<int>("Roles")
                        .HasColumnType("integer")
                        .HasColumnName("roles");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.HasKey("Id");

                    b.HasIndex("InvitedByUserId");

                    b.HasIndex("TenantId");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("invitations", "app");
                });

            modelBuilder.Entity("Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Audience")
                        .HasColumnType("integer")
                        .HasColumnName("audience");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Status");

                    b.ToTable("lessons", "app");
                });

            modelBuilder.Entity("LoginToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ConsumedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("consumed_at");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("citext")
                        .HasColumnName("email");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("purpose");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("token_hash");

                    b.HasKey("Id");

                    b.HasIndex("TokenHash")
                        .IsUnique();

                    b.HasIndex("Email", "CreatedAt")
                        .HasDatabaseName("ix_login_tokens_email_created");

                    b.ToTable("login_tokens", "app");
                });

            modelBuilder.Entity("Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Roles")
                        .HasColumnType("integer")
                        .HasColumnName("roles");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId")
                        .IsUnique();

                    b.ToTable("memberships", "app");
                });

            modelBuilder.Entity("Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<JsonDocument>("Settings")
                        .HasColumnType("jsonb")
                        .HasColumnName("settings");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("tenants", "app");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("bytea")
                        .HasColumnName("password_salt");

                    b.Property<DateTime?>("PasswordUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("password_updated_at");

                    b.Property<JsonDocument>("Profile")
                        .HasColumnType("jsonb")
                        .HasColumnName("profile");

                    b.Property<int>("TokenVersion")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users", "app");
                });

            modelBuilder.Entity("Appostolic.Api.Domain.Guardrails.GuardrailTenantPolicy", b =>
                {
                    b.HasOne("Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Appostolic.Api.Domain.Guardrails.GuardrailUserPreference", b =>
                {
                    b.HasOne("Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Appostolic.Api.Domain.Notifications.Notification", b =>
                {
                    b.HasOne("Appostolic.Api.Domain.Notifications.Notification", null)
                        .WithMany()
                        .HasForeignKey("ResendOfNotificationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_notifications_resend_of");
                });

            modelBuilder.Entity("Appostolic.Api.Infrastructure.Auth.Jwt.RefreshToken", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Audit", b =>
                {
                    b.HasOne("Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Invitation", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("InvitedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lesson", b =>
                {
                    b.HasOne("Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Membership", b =>
                {
                    b.HasOne("Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
